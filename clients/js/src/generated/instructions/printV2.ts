/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { PrintArgs, PrintArgsArgs, getPrintArgsSerializer } from '../types';

// Accounts.
export type PrintV2InstructionAccounts = {
  /** The master edition holder or holder delegate */
  authority?: Signer;
  /** The Delegate Record authorizing escrowless edition printing */
  holderDelegateRecord?: PublicKey | Pda;
  /** New Metadata key (pda of ['metadata', program id, mint id]) */
  editionMetadata: PublicKey | Pda;
  /** New Edition (pda of ['metadata', program id, mint id, 'edition']) */
  edition: PublicKey | Pda;
  /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
  editionMint: PublicKey | Pda;
  /** Owner of the token account of new token */
  editionTokenAccountOwner: PublicKey | Pda;
  /** Token account of new token */
  editionTokenAccount: PublicKey | Pda;
  /** Mint authority of new mint */
  editionMintAuthority: PublicKey | Pda | Signer;
  /** Token record account */
  editionTokenRecord?: PublicKey | Pda;
  /** Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
  masterEdition: PublicKey | Pda;
  /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). */
  editionMarkerPda: PublicKey | Pda;
  /** owner of token account containing master token */
  masterTokenAccountOwner: PublicKey | Pda;
  /** token account containing token from master metadata mint */
  masterTokenAccount: PublicKey | Pda;
  /** Master record metadata account */
  masterMetadata: PublicKey | Pda;
  /** The update authority of the master edition. */
  updateAuthority?: PublicKey | Pda;
  /** payer */
  payer?: Signer;
  /** Token program */
  splTokenProgram?: PublicKey | Pda;
  /** SPL Associated Token Account program */
  splAtaProgram?: PublicKey | Pda;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type PrintV2InstructionData = {
  discriminator: number;
  printArgs: PrintArgs;
};

export type PrintV2InstructionDataArgs = { printArgs: PrintArgsArgs };

export function getPrintV2InstructionDataSerializer(): Serializer<
  PrintV2InstructionDataArgs,
  PrintV2InstructionData
> {
  return mapSerializer<PrintV2InstructionDataArgs, any, PrintV2InstructionData>(
    struct<PrintV2InstructionData>(
      [
        ['discriminator', u8()],
        ['printArgs', getPrintArgsSerializer()],
      ],
      { description: 'PrintV2InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 56 })
  ) as Serializer<PrintV2InstructionDataArgs, PrintV2InstructionData>;
}

// Args.
export type PrintV2InstructionArgs = PrintV2InstructionDataArgs;

// Instruction.
export function printV2(
  context: Pick<Context, 'identity' | 'payer' | 'programs'>,
  input: PrintV2InstructionAccounts & PrintV2InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    holderDelegateRecord: {
      index: 1,
      isWritable: false as boolean,
      value: input.holderDelegateRecord ?? null,
    },
    editionMetadata: {
      index: 2,
      isWritable: true as boolean,
      value: input.editionMetadata ?? null,
    },
    edition: {
      index: 3,
      isWritable: true as boolean,
      value: input.edition ?? null,
    },
    editionMint: {
      index: 4,
      isWritable: true as boolean,
      value: input.editionMint ?? null,
    },
    editionTokenAccountOwner: {
      index: 5,
      isWritable: false as boolean,
      value: input.editionTokenAccountOwner ?? null,
    },
    editionTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.editionTokenAccount ?? null,
    },
    editionMintAuthority: {
      index: 7,
      isWritable: false as boolean,
      value: input.editionMintAuthority ?? null,
    },
    editionTokenRecord: {
      index: 8,
      isWritable: true as boolean,
      value: input.editionTokenRecord ?? null,
    },
    masterEdition: {
      index: 9,
      isWritable: true as boolean,
      value: input.masterEdition ?? null,
    },
    editionMarkerPda: {
      index: 10,
      isWritable: true as boolean,
      value: input.editionMarkerPda ?? null,
    },
    masterTokenAccountOwner: {
      index: 11,
      isWritable: false as boolean,
      value: input.masterTokenAccountOwner ?? null,
    },
    masterTokenAccount: {
      index: 12,
      isWritable: false as boolean,
      value: input.masterTokenAccount ?? null,
    },
    masterMetadata: {
      index: 13,
      isWritable: false as boolean,
      value: input.masterMetadata ?? null,
    },
    updateAuthority: {
      index: 14,
      isWritable: false as boolean,
      value: input.updateAuthority ?? null,
    },
    payer: {
      index: 15,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    splTokenProgram: {
      index: 16,
      isWritable: false as boolean,
      value: input.splTokenProgram ?? null,
    },
    splAtaProgram: {
      index: 17,
      isWritable: false as boolean,
      value: input.splAtaProgram ?? null,
    },
    sysvarInstructions: {
      index: 18,
      isWritable: false as boolean,
      value: input.sysvarInstructions ?? null,
    },
    systemProgram: {
      index: 19,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: PrintV2InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.updateAuthority.value) {
    resolvedAccounts.updateAuthority.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.splTokenProgram.value) {
    resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.splTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.splAtaProgram.value) {
    resolvedAccounts.splAtaProgram.value = context.programs.getPublicKey(
      'splAssociatedToken',
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
    resolvedAccounts.splAtaProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarInstructions.value) {
    resolvedAccounts.sysvarInstructions.value = publicKey(
      'Sysvar1nstructions1111111111111111111111111'
    );
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getPrintV2InstructionDataSerializer().serialize(
    resolvedArgs as PrintV2InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
